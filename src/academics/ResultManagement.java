/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package academics;
import java.sql.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.InputEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
/**
 *
 * @author Administrator
 */
public class ResultManagement extends javax.swing.JFrame  {
 
    public static  JLabel[] labels; 
    public  static  JTextField[] fields;
    public static String[] columns= {"Roll No","Name","Year","Section"};
    public static String[] tablecolumns;
    public static String [] subj;
    public static int keyj=0;
    /**
     * Creates new form ResultManagement
     */
    public ResultManagement() throws Exception {
        initComponents();
        DisplayResult();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            };
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component comp = super.prepareRenderer(renderer, row, column);
                Color alternateColor = new Color(255, 255, 255);
                Color whiteColor = new  Color(255,255,255);
                if(!comp.getBackground().equals(getSelectionBackground())) {
                    Color c = (row % 2 == 0 ? alternateColor : whiteColor);
                    comp.setBackground(c);
                    c = null;
                }
                return comp;
            }
        };
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        jPopupMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jPopupMenu1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenu1PopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuItem1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem1.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jMenuItem1.setText("  Max Marks");
        jMenuItem1.setBorder(null);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem2.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jMenuItem2.setText("  Min Marks");
        jMenuItem2.setBorder(null);
        jMenuItem2.setPreferredSize(new java.awt.Dimension(100, 26));
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STUDENT RESULT MANAGEMENT");

        jScrollPane1.setBackground(new java.awt.Color(240, 248, 255));

        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jTable1.setModel(model);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setGridColor(new java.awt.Color(240, 248, 255));
        jTable1.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTable1.setRowHeight(30);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setSelectionBackground(new java.awt.Color(240, 248, 255));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.setShowGrid(false);
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        JTableHeader tableHeader = jTable1.getTableHeader();
        tableHeader.setBackground(new Color(240,248,255));
        tableHeader.setForeground(new Color(0,0,0));
        Font font = new Font("Lucida Sans", Font.PLAIN, 14);
        tableHeader.setFont(font);
        TableCellRenderer rendererFromHeader = jTable1.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jTable1.setDefaultRenderer(String.class, centerRenderer);

        jButton1.setBackground(new java.awt.Color(25, 25, 112));
        jButton1.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText(" Add");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusable(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(240, 248, 255));

        jLabel3.setBackground(new java.awt.Color(240, 248, 255));
        jLabel3.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jLabel3.setText("Roll No");
        jLabel3.setBorder(null);

        jTextField2.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jTextField2.setBorder(null);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addGap(19, 19, 19))
        );

        jButton3.setBackground(new java.awt.Color(25, 25, 112));
        jButton3.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Update");
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setFocusable(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(240, 248, 255));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jLabel2.setText("Section");
        jLabel2.setBorder(null);

        jComboBox1.setEditable(true);
        jComboBox1.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "1", "2", "3", "4", "5" }));
        jComboBox1.setBorder(null);
        jComboBox1.setFocusable(false);

        jTextField1.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(192, 192, 192));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Search");
        jTextField1.setBorder(null);
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(25, 25, 112));
        jButton2.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Refresh");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusable(false);
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setBackground(new java.awt.Color(240, 248, 255));
        jScrollPane2.setBorder(null);
        jScrollPane2.setToolTipText("");
        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 248, 255)));
        jScrollPane2.setHorizontalScrollBar(null);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(297, 248));

        jPanel2.setBackground(new java.awt.Color(240, 248, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(295, 248));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(247, 247, 247))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 962, 508);

        setSize(new java.awt.Dimension(978, 546));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   
      
  
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String rollno=jTextField2.getText();
        String query="";
        String query1="";
        String [] marks;
        int [] intmarks;
        String [] subjects;
        int section;
        int year;
        int j=0;
        String query5="";
        String  name="";
        String year_semester=FacultyAccess.YEAR+"-"+FacultyAccess.SEMESTER;
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        Connection con=null;
        try
        {
          con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
          query="select * from student where studentname ='"+rollno+"'";
          Statement sa=con.createStatement();
          ResultSet rt=sa.executeQuery(query);
          if(rt.next())
          {
            name=rt.getString("stuname");
            section=rt.getInt("section");
            Statement st=con.createStatement();
            query1="select * from "+subtable+" where studentname ='"+rollno+"'";
            ResultSet rs=st.executeQuery(query);
            if(rs.next())
            {
              marks=new String[subj.length];
              intmarks=new int[subj.length];
              subjects=new String[subj.length];
              String query4="update "+subtable+" set ";
              for(int i=0;i<subj.length;i++)
              {
                 if(fields[i].getText().equals(""))
                 {
                  JOptionPane.showMessageDialog(this,"Please fill the marks for "+subj[i], "Alert", JOptionPane.WARNING_MESSAGE);
                  return;
                 }
                 else
                 {
                  marks[i]=fields[i].getText();
                  intmarks[i]=Integer.parseInt(marks[i]);
                  if(subj[i].contains("-"))
                  {
                      subjects[i]=subj[i].replace("-","_");
                  }
                  else if(subj[i].contains(" "))
                  {
                      subjects[i]=subj[i].replace(" ","_");
                  }
                  else
                  {
                      subjects[i]=subj[i];
                  }
                  query5=query5+subjects[i]+"="+marks[i]+",";
                 }
                 
              }
              StringBuilder sb=new StringBuilder(query5);
              sb.deleteCharAt(query5.length()-1);
              query5=query4+sb.toString()+" where studentname ='"+rollno+"'";
              PreparedStatement sta=con.prepareStatement(query5);
              sta.executeUpdate();
              displayRows(subj);
              jTextField2.setText("");
              for(int i=0;i<subj.length;i++)
              {
                  fields[i].setText("");
              }
              
              rs.close();
              st.close();
              sta.close();
             }
            
            
            else
            {
               JOptionPane.showMessageDialog(this,"Marks does not exist,Please Add ", "Alert", JOptionPane.WARNING_MESSAGE);
               for(int i=0;i<subj.length;i++)
               {
                   fields[i].setText("");
               }
               jTextField2.setText("");

            }
         }
         else
          {    
              if(rollno.equals(""))
              {
                  JOptionPane.showMessageDialog(this,"Please enter the roll number", "Alert", JOptionPane.WARNING_MESSAGE);
              }
              else
              {
               JOptionPane.showMessageDialog(this,"Student data doesnot exists,Please add the data ", "Alert", JOptionPane.WARNING_MESSAGE);
              }
          }
         
        } catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        // TODO add your handling code here:
        if(jTextField1.getText().equals("Search"))
        {
            jTextField1.setText("");
            jTextField1.setForeground(new Color(0,0,0));
            jTextField1.setHorizontalAlignment(JTextField.LEFT);
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
         if(jTextField1.getText().equals(""))
        {
            jTextField1.setText("Search");
            jTextField1.setForeground(new Color(192,192,192));
            jTextField1.setHorizontalAlignment(JTextField.CENTER);
        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         String rollno=jTextField2.getText();
         String query1="";
         String SUBJECTS="";
         String [] marks;
         int [] intmarks;
         String  questions="(?,?,?,?";
         int section;
         int year;
         int j=0;
         String  name="";
        String year_semester=FacultyAccess.YEAR+"-"+FacultyAccess.SEMESTER;
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        Connection con=null;
        try{
           query1="select * from "+FacultyAccess.BRANCH.toLowerCase()+"_subjects where year_semester='"+year_semester+"'";
           con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
           Statement st=con.createStatement();
           ResultSet rs=st.executeQuery(query1);
           while(rs.next())
           {
               SUBJECTS=rs.getString(2);
           }
           String subjects[]=SUBJECTS.split(",");
           marks=new String[subjects.length];
           if(rollno.contains("WJ1A"))
           {
             String query="select * from student where studentname='"+rollno+"' order by studentname";
             Statement sr=con.createStatement();
             ResultSet s=sr.executeQuery(query);
             if (s.next())
             
             {
                year=s.getInt("year");
                section=s.getInt("section");
                name=s.getString("Stuname");
                System.out.println(year+""+section+""+name);
                Statement state1=con.createStatement();
                String query3="select * from "+subtable+" where studentname='"+rollno+"' order by studentname";
                ResultSet set=state1.executeQuery(query3);
                if(!set.next())
                { 
                  intmarks=new int[subjects.length];
                  for(int i=0;i<subjects.length;i++)
                   {
               
                    if(fields[i].getText().equals(""))
                     {
                       JOptionPane.showMessageDialog(this,"Please fill the marks for "+subjects[i], "Alert", JOptionPane.WARNING_MESSAGE);
                       return;
                     }
                    else
                    {
                      marks[i]=fields[i].getText();
                      questions=questions+",?";
                      intmarks[i]=Integer.parseInt(marks[i]);
                      System.out.println(intmarks[i]);
                     }
                   }
                  questions=questions+")";
                  System.out.println(questions);
                  String finalquery="insert into "+subtable+" values "+questions;
                  PreparedStatement pt=con.prepareStatement(finalquery);
                  pt.setString(1,rollno);
                  pt.setString(2,name);
                  pt.setInt(3,FacultyAccess.YEAR);
                  pt.setInt(4,section);
                  for(int i=5;i<subjects.length+5;i++)
                  {
                      pt.setInt(i,intmarks[j]);
                      j++;
                  }
                  pt.executeUpdate();
                  System.out.println("Inserted record in the table");
                  jTextField2.setText("");
                  for(int k=0;k<subjects.length;k++)
                  {
                      fields[k].setText("");
                  }
                  displayRows(subjects);
                  
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Marks already exits,Please Update", "Alert", JOptionPane.WARNING_MESSAGE);
                }
                
                
             }
             else
             {
                 JOptionPane.showMessageDialog(this,"Data does not exists in database please Add", "Alert", JOptionPane.WARNING_MESSAGE);
             }
           }
           else
           {
              if(rollno.equals(""))
              {
                  JOptionPane.showMessageDialog(this,"Please enter the Roll Number", "Alert", JOptionPane.WARNING_MESSAGE);
              }
              else
              {
              JOptionPane.showMessageDialog(this,"Roll No is incorrect", "Alert", JOptionPane.WARNING_MESSAGE);
              }
           }
        } catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String query1;
        String SUBJECTS="";
         String year_semester=FacultyAccess.YEAR+"-"+FacultyAccess.SEMESTER;
        Connection con=null;
        try{
           query1="select * from "+FacultyAccess.BRANCH.toLowerCase()+"_subjects where year_semester='"+year_semester+"'";
           con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
           Statement st=con.createStatement();
           ResultSet rs=st.executeQuery(query1);
           while(rs.next())
           {
               SUBJECTS=rs.getString(2);
           }
           String subjects[]=SUBJECTS.split(",");
           displayRows(subjects);
        } 
        catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        
        int l=0;
        model.setRowCount(0);
        String Name=jTextField1.getText();
        System.out.println(Name);
        String query;
        String section=(String)jComboBox1.getSelectedItem();
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        Connection con=null;
        if(Name.contains("WJ1A"))
        {   if(section.equals("All"))
           {
            query="select * from "+subtable+" where studentname like ? order by studentname";
           }
           else
           {
             query="select * from "+subtable+" where studentname like ? and section ='"+section+"' order by studentname";
           } 
        }
        else
        {
            if(section.equals("All"))
           {
            query="select * from "+subtable+" where stuname like ? order by studentname";
           }
            else
            {
                query="select * from "+subtable+" where stuname like ?  and section ='"+section+"' order by studentname";
            }
        }
        try
        {  
            System.out.println(query);
            con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
            PreparedStatement st=con.prepareStatement(query);
            st.setString(1,Name+"%");
            ResultSet rs= st.executeQuery();
            while(rs.next())
            {
                int j=4;
                String rollno=rs.getString(1);
                String name=rs.getString(2);
                int year=rs.getInt(3);
                int section2=rs.getInt(4);
                int[] arrr=new int[subj.length];
               
                
                model.addRow(new Object[]{rollno,name,year,section2});
                for(int m=5;m<subj.length+5;m++)
                {
                model.setValueAt(rs.getInt(m),l, j);
                j++;
                }
                l++;
            }
           
        } catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        String section=(String)jComboBox1.getSelectedItem();
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        int column=jTable1.getSelectedColumn();
        String columnName=jTable1.getColumnName(column);
        System.out.println(columnName);
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        Connection con=null;
        int max=0;
        String query="";
        String query1="";
        if(columnName.contains("-"))
        {
            columnName=columnName.replace("-","_");
        }
        if(columnName.contains(" "))
        {
            columnName=columnName.replace(" ","_");
        }
        if(section.equals("All"))
        {
             query = "select max("+columnName+") from "+subtable+" order by studentname";
        }
        else
        {
            query = "select max("+columnName+") from "+subtable+" where section ='"+section+"' order by studentname";
        }
       
        if(column > 3)
         {
             model.setRowCount(0);
            try
            {
                con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
                Statement st=con.createStatement();
                ResultSet rs=st.executeQuery(query);
                while(rs.next())
                {
                   max=rs.getInt(1);
                    System.out.println(max);
                }
                if(section.equals("All"))
                {
                      query1="select * from "+subtable+" where "+columnName+"="+String.valueOf(max)+" order by studentname";
                }
                else
                {
                    query1="select * from "+subtable+" where "+columnName+"="+String.valueOf(max)+" and section ='"+section+"' order by studentname";
                }
               
               System.out.println(query1);
               Statement sa=con.createStatement();
               ResultSet ra=sa.executeQuery(query1);
               int l=0;
               while(ra.next())
               {
                 int j=4;
                 String rollno=ra.getString(1);
                String name=ra.getString(2);
                int year=ra.getInt(3);
                int section2=ra.getInt(4);
                int[] arrr=new int[subj.length];
                  
                model.addRow(new Object[]{rollno,name,year,section2});
                for(int m=5;m<subj.length+5;m++)
                {
                model.setValueAt(ra.getInt(m),l, j);
                j++;
                }
                l++;
             }
               ra.close();
               st.close();
               sa.close();
               rs.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Only for subjects", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
         String section=(String)jComboBox1.getSelectedItem();
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        int column=jTable1.getSelectedColumn();
        String columnName=jTable1.getColumnName(column);
        System.out.println(columnName);
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        Connection con=null;
        int min=0;
        String query="";
        String query1="";
        
        if(columnName.contains("-"))
        {
            columnName=columnName.replace("-","_");
        }
        if(columnName.contains(" "))
        {
            columnName=columnName.replace(" ","_");
        }
        if(section.equals("All"))
        {
             query = "select min("+columnName+") from "+subtable+" order by studentname";
        }
        else
        {
            query = "select min("+columnName+") from "+subtable+" where section ='"+section+"' order by studentname";
        }
       
        if(column > 3)
         {
             model.setRowCount(0);
            try
            {
                con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
                Statement st=con.createStatement();
                ResultSet rs=st.executeQuery(query);
                while(rs.next())
                {
                   min=rs.getInt(1);
                    System.out.println(min);
                }
                if(section.equals("All"))
                {
                      query1="select * from "+subtable+" where "+columnName+"="+String.valueOf(min)+" order by studentname";
                }
                else
                {
                    query1="select * from "+subtable+" where "+columnName+"="+String.valueOf(min)+" and section ='"+section+"' order by studentname";
                }
               System.out.println(query1);
               Statement sa=con.createStatement();
               ResultSet ra=sa.executeQuery(query1);
               int l=0;
               while(ra.next())
               {
                 int j=4;
                 String rollno=ra.getString(1);
                String name=ra.getString(2);
                int year=ra.getInt(3);
                int section2=ra.getInt(4);
                int[] arrr=new int[subj.length];
                  
                model.addRow(new Object[]{rollno,name,year,section2});
                for(int m=5;m<subj.length+5;m++)
                {
                model.setValueAt(ra.getInt(m),l, j);
                j++;
                }
                l++;
             }
               st.close();
               ra.close();
               sa.close();
               rs.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Only for subjects", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jPopupMenu1PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenu1PopupMenuWillBecomeVisible
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPopupMenu1PopupMenuWillBecomeVisible

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
        if(evt.isPopupTrigger() && jTable1.getSelectedColumn()> 3)
        {
            jPopupMenu1.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseReleased
   static DefaultTableModel model=new DefaultTableModel();
    
  
   public static TableColumnModel tf ;
    
   
    public static void DisplayResult() throws Exception
    {
        model.setColumnCount(0);
        int x=10,y=10,z;
        keyj=0;
        String query1;
        String query2;
        String SUBJECTS="";
        String year_semester=FacultyAccess.YEAR+"-"+FacultyAccess.SEMESTER;
        Connection con=null;
        try{
           query1="select * from "+FacultyAccess.BRANCH.toLowerCase()+"_subjects where year_semester='"+year_semester+"'";
           con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
           Statement st=con.createStatement();
           ResultSet rs=st.executeQuery(query1);
           while(rs.next())
           {
               SUBJECTS=rs.getString(2);
           }
           String subjects[]=SUBJECTS.split(",");
           subj=new String[subjects.length];
           for(int i=0;i<subjects.length;i++)
           {
               subj[i]=subjects[i];
           }
           GridLayout bg=new GridLayout(subjects.length,2,5,20);
           jPanel2.setLayout(bg);
           labels = new JLabel[subjects.length];
           fields=new JTextField[subjects.length];
           for(int i=0;i<subjects.length && keyj<subjects.length;i++)
           {   
               
               labels[i]=new JLabel(subjects[i]);
               labels[i].setFont(new Font("Lucida Sans",Font.PLAIN,16));
               labels[i].setHorizontalAlignment(JLabel.LEFT);
               labels[i].setBackground(new Color(240,248,255));
               labels[i].setBorder(null);
               fields[i]=new JTextField();
               fields[i].setFont(new Font("Lucida Sans",Font.PLAIN,16));
               fields[i].setHorizontalAlignment(JLabel.LEFT);
               fields[i].setBackground(new Color(255,255,255));
               fields[i].setBorder(null);
               jPanel2.add(labels[i]);
               jPanel2.add(fields[i]);
                           
               }
           
           model.addColumn("Roll No");
           model.addColumn("Name");
           model.addColumn("Year");
           model.addColumn("Section");
           for(int k=0;k<subjects.length;k++)
           {
               model.addColumn(subjects[k]);
           }
           tf=jTable1.getColumnModel();
           tf.getColumn(0).setPreferredWidth(110);
            tf.getColumn(1).setPreferredWidth(150);
           tf.getColumn(2).setPreferredWidth(50);
           tf.getColumn(3).setPreferredWidth(60);
           
           for(int v=4;v<subjects.length+4;v++)
           {
                    tf.getColumn(v).setPreferredWidth(60);
            }
            jTable1.getTableHeader().setResizingAllowed(false);
           jTable1.getTableHeader().setReorderingAllowed(false);
           displayRows(subjects);     
          
          st.close();
          rs.close();
        
 }
        
        catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void keyspressed()
    {
        for (JTextField field : fields) {
            field.addKeyListener(new KeyAdapter(){
                public void KeyPressed(KeyEvent evt)
                {
                    if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') || evt.getKeyChar() == '\b') {
                     field.setEditable(true);
 
                   } else {
                    field.setEditable(false);

                   }
                }
            });
        }
        
       
    }
    
    public static void displayRows(String subjects[]) throws Exception
    {    
        model.setRowCount(0);
       
        String query1="";
        String query2="";
        String section=(String)jComboBox1.getSelectedItem();
        Connection con=null;
        String subtable=FacultyAccess.BRANCH.toLowerCase()+"_marks_"+FacultyAccess.YEAR+"_"+FacultyAccess.SEMESTER;
        System.out.println(subtable);
        try 
         {
            con=DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
            Statement st=con.createStatement();
            
            if(section.equals("All"))
            {
                query1="select * from "+subtable +" order by studentname";
            }
            else
            {
                int section1=Integer.parseInt(section);
                query1="select * from "+subtable+" where section ='"+section1+"' order by studentname";
            }
            ResultSet rs=st.executeQuery(query1);
            int l=0;
            while(rs.next())
            {  
                int j=4;
                String rollno=rs.getString(1);
                String name=rs.getString(2);
                int year=rs.getInt(3);
                int section2=rs.getInt(4);
                int[] arrr=new int[subjects.length];
               
                
                model.addRow(new Object[]{rollno,name,year,section2});
                for(int m=5;m<subjects.length+5;m++)
                {
                model.setValueAt(rs.getInt(m),l, j);
                j++;
                }
                l++;
             }
            rs.close();
            st.close();
                
        }
     catch (SQLException ex) {
            Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        Login.loadingsqldriver();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ResultManagement().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ResultManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private static javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
