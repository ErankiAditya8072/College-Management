/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package academics;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;

import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.text.*;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.util.*;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Administrator
 */
public class ShowAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ShowAttendance
     */
    public ShowAttendance() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable()
        {
            public boolean isCellEditable(int row, int column) {
                return false;
            };
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component comp = super.prepareRenderer(renderer, row, column);
                Color alternateColor = new Color(255, 255, 255);
                Color whiteColor = Color.WHITE;
                if(!comp.getBackground().equals(getSelectionBackground())) {
                    Color c = (row % 2 == 0 ? alternateColor : whiteColor);
                    comp.setBackground(c);
                    c = null;
                }
                return comp;
            }
        }
        ;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(240, 248, 255));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        jTextField1.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setBorder(null);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTable1.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        jTable1.setModel(model);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.setShowGrid(true);
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        JTableHeader tableHeader = jTable1.getTableHeader();
        tableHeader.setBackground(new Color(240,248,255));
        tableHeader.setForeground(new Color(0,0,0));
        Font font = new Font("Lucida Sans", Font.PLAIN, 14);
        tableHeader.setFont(font);
        TableCellRenderer rendererFromHeader = jTable1.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jTable1.setDefaultRenderer(String.class, centerRenderer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(646, 533));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

  
   static DefaultTableModel model=new DefaultTableModel();
   static TableColumnModel tt;
   
    public static void ShowAttendanceStatistics(String branch,String year,String section,String semester,String day,String month,String yeard,String date,int maxDay) throws ParseException
    {
        int day1=Integer.parseInt(day);
        Date d=new  SimpleDateFormat("dd-MM-yyyy").parse(date);
        Calendar c=Calendar.getInstance();
        c.setTime(d);
        int month1 = c.get(Calendar.MONTH);
        String monthName=getMonthName(month1);
          jTextField1.setText(branch.toUpperCase()+"   "+year+" - "+semester+"   "+monthName+"   "+yeard);
        System.out.println(monthName);
        int m=1;
        int l=0;
        int z=0;
        int n=0;
        int students=0;
        HashMap<Integer,List> hash=new HashMap<>();
        List<Integer> list1=new ArrayList<>();
        String tablename=branch+"_"+"attendance"+"_"+year+"_"+semester;
        model.setRowCount(0);
        model.setColumnCount(0);
        model.addColumn("Roll No");
        model.addColumn("Name");
         for(int k=2;k<=maxDay+1;k++)
        {
            model.addColumn(String.valueOf(m));
            m++;
        }
        tt=jTable1.getColumnModel();
        tt.getColumn(0).setPreferredWidth(110);
        tt.getColumn(1).setPreferredWidth(150);
        for(int i=2;i<=maxDay+1;i++)
        {
          tt.getColumn(i).setPreferredWidth(60);
            l++;
        }
        try
        {
            Connection con =DriverManager.getConnection(Login.urldatabase,Login.useroot,Login.passdatabase);
            String query1="select * from student where branch='"+branch+"' and year='"+year+"' and section='"+section+"' order by studentname";
            Statement ss=con.createStatement();
            ResultSet ra=ss.executeQuery(query1);
            while(ra.next())
            {
               students++;
               model.addRow(new Object[]{ra.getString("studentname"),ra.getString("stuname")});
            }
            String query="select * from "+tablename+" where month='"+month+"' and year='"+yeard+"' and section='"+section+"'";
            Statement st=con.createStatement();
            ResultSet rs=st.executeQuery(query);
            while(rs.next())
            {
              int dat=Integer.parseInt(rs.getString("day"))+1;
              int da=Integer.parseInt(rs.getString("day"));
              list1.add(da);
              String temp = rs.getString("absentees");
              String arr[] = temp.split(",");
              List<String> list = Arrays.asList(arr); 
              hash.put(dat,list);
            }
           
                for(Map.Entry<Integer,List> ent :hash.entrySet()){
                 int temp1 = ent.getKey();
                 List temp2 = ent.getValue();
                 for(int i=0;i<model.getRowCount();i++)
                 {
                     String temp3=(String)model.getValueAt(i,0);
                     if(temp2.contains(temp3))
                     {
                         model.setValueAt("A",i,temp1);
                     }
                     else
                     {
                         model.setValueAt("P", i,temp1);
                     }
                 }
            
               }
             
               for(int j=0;j<model.getRowCount();j++)
               {
                   int b=1;
                   for(int v=1;v<=day1;v++)
                   {
                       if(! list1.contains(b))
                       {
                           model.setValueAt("-",j,v+1);
                       }
                       else
                       {
                          String k=(String)model.getValueAt(j,v);
                          model.setValueAt(k,j,v);
                       }
                       b++;
                   }
               }
             ra.close();
             st.close();
             rs.close();
             ss.close();
             con.close();

        } catch (SQLException ex) {
            Logger.getLogger(ShowAttendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
      public static String getMonthName(int Month)
    {
        String monthName = null;
		switch (Month) {
		case 0:
			monthName = "January";
			break;
		case 1:
			monthName = "February";
			break;
		case 2:
			monthName = "March";
			break;
		case 3:
			monthName = "April";
			break;
		case 4:
			monthName = "May";
			break;
		case 5:
			monthName = "June";
			break;
		case 6:
			monthName = "July";
			break;
		case 7:
			monthName = "August";
			break;
		case 8:
			monthName = "September";
			break;
		case 9:
			monthName = "October";
			break;
		case 10:
			monthName = "November";
			break;
		case 11:
			monthName = "December";
			break;
		}

		return monthName;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            //</editor-fold>
            Login.loadingsqldriver();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ShowAttendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
